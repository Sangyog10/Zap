// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String
  password String
  zaps     Zap[]
}

model Zap {
  id        String   @id @default(uuid())
  triggerId String
  userId    Int
  trigger   Trigger? //either 1 or none
  actions   Action[] //multiple
  zapRuns   ZapRun[] //multiple
  User      User     @relation(fields: [userId], references: [id])
}

//eg. if someone commment right ans in comment(its a trigger) , get theri name in notion list, send them money, email them (they are actions)

//zap has one to one relationship with trigger and one to many relationship with actions
//every trigger is of certain type like webhooks,, github comment, facebook post i.e AvailableTriggers(one to many relation)
//and every availabeTrigger is a part of many triggers

model Trigger {
  id        String           @id @default(uuid())
  zapId     String           @unique
  triggerId String
  type      AvailableTrigger @relation(fields: [triggerId], references: [id])
  zap       Zap              @relation(fields: [zapId], references: [id])
}

model AvailableTrigger {
  id       String    @id @default(uuid())
  name     String
  image    String
  triggers Trigger[]
}

model Action {
  id           String          @id @default(uuid())
  zapId        String
  zap          Zap             @relation(fields: [zapId], references: [id])
  actionId     String
  type         AvailableAction @relation(fields: [actionId], references: [id])
  sortingOrder Int             @default(0)
}

model AvailableAction {
  id      String   @id @default(uuid())
  name    String
  image   String
  actions Action[]
}

model ZapRun {
  id             String        @id @default(uuid())
  zapId          String
  metadata       Json
  zap            Zap           @relation(fields: [zapId], references: [id])
  zapRunOutboxId ZapRunOutbox?
}

model ZapRunOutbox {
  id       String @id @default(uuid())
  zapRunId String @unique
  zapRun   ZapRun @relation(fields: [zapRunId], references: [id])
}

//outbox architecture used: ie. create atomic transation in single db(2 entries) and one for storing it, another will be used to run process
//that will get it in kafka
